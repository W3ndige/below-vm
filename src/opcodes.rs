pub enum Opcodes {
    NOP,
    EXT,
    MOV,
    SET,
    LOAD,
    MMOV,
    MSET,
    MLOAD,
    OR,
    AND,
    XOR,
    NOT,
    ADD,
    ADC,
    SUB,
    SBC,
    MUL,
    DIV,
    SHL,
    SHR,
    OUT,
    CMP,
    JMP,
    JMPGR,
    JMPLO,
    JMPEQ,
    NON
}

impl Opcodes {
    pub fn to_enum(opcode: u8) -> Self {
        match opcode {
            0x00 => return Opcodes::NOP,
            0x01 => return Opcodes::EXT,
            0x02 => return Opcodes::MOV,
            0x03 => return Opcodes::SET,
            0x04 => return Opcodes::LOAD,
            0x05 => return Opcodes::MMOV,
            0x06 => return Opcodes::MSET,
            0x07 => return Opcodes::MLOAD,
            0x08 => return Opcodes::OR,
            0x09 => return Opcodes::AND,
            0x0A => return Opcodes::XOR,
            0x0B => return Opcodes::NOT,
            0x0C => return Opcodes::ADD,
            0x0D => return Opcodes::ADC,
            0x0E => return Opcodes::SUB,
            0x0F => return Opcodes::SBC,
            0x10 => return Opcodes::MUL,
            0x11 => return Opcodes::DIV,
            0x12 => return Opcodes::SHL,
            0x13 => return Opcodes::SHR,
            0x14 => return Opcodes::OUT,
            0x15 => return Opcodes::CMP,
            0x16 => return Opcodes::JMP,
            0x17 => return Opcodes::JMPGR,
            0x18 => return Opcodes::JMPLO,
            0x19 => return Opcodes::JMPEQ,
            _ =>    return Opcodes::NON
        } 
    }
}